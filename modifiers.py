# from __future__ import annotations

# from dataclasses import dataclass
# from datetime import datetime
# from enum import Enum


# @dataclass()
# class MarketEvent:
#     """
#     MarketEvent()

#     event_type: Supply(shock) | Demand(shock)
#     affected_region: None | Region that is affected refer to class Regions(enum)
#     affected_city: City affected (required) - Market Events are assigned at City level, cannot be populated to region alone
#     affected_category: TradeGoodsCategory | None - Good category if specified
#     affected_trade_good: TradeGoods | None - Trade good specifically affected
#     time_to_expire: datetime.timedelta - to be used to set a specific time expiry
#     time_sent: datetime - record of when MarketEvent object created, (may delete)

#     Describes a MarketEvent object
#     These are events that affect supply and demand for goods across the world
#     They are generated by the game every turn at random and generally can be thought of as following a gaussian distribution in their affect and occurance

#
#     class also features the relevant classmethods
#     """
#     event_type: Enum
#     affected_region: Enum
#     affected_city: Enum
#     affected_category: Enum
#     affected_trade_good: Enum
#     time_to_expire: datetime
#     time_sent: datetime

#     @classmethod
#     def get_MarketEvent(cls, city, item):
#         """
#         Returns list of MarketEvent() objects for a given city, item pair
#         Allows lookup of specific events with regards to specific items in specific cities
#         Args:
#             city (City): City that you are looking for checking for a MarketEvent
#             item (MarketItem(item)): Item or TradeGood that you are checking for an applicable MarketEvent

#         Returns:
#             list[MarketEvent]: All MarketEvent objects for a given city, item pair
#         """
#         [getattr(city, event) for event in city.__dict__ if isinstance(
#             getattr(city, event), MarketEvent)]

#     @classmethod
#     def delete_MarketEvent(cls, event: MarketEvent):
#         """
#         Deletes MarketEvent from city attributes when called

#         Args:
#             event (MarketEvent): MarketEvent obj to be deleted
#         """
#         delattr(event.affected_city, event.__repr__())

#     @classmethod
#     def get_all_events(cls, city):
#         """
#         Returns list of MarketEvents in a city when called

#         Args:
#             city (City): City MarketEvent are in city attributes at time of call

#         Returns:
#             List[MarketEvent]: List of all MarketEvent objects
#         """
#         return [getattr(city, events) for events in city.__dict__ if isinstance(getattr(city, events), MarketEvent)]

#     @classmethod
#     def create_MarketEvent(cls, city, event):
#         """
#         Placeholder - working on UUID system for marketevents, MarketEvent Generator

#         Args:
#             city (_type_): _description_
#             rumor (_type_): _description_
#         """
#         pass


# @dataclass()
# class TravelModifier:
#     """
#     Describes a TravelModifier object, modifies travel speed and thereby time to arrival in a city. This can affect whether or not a player can arrive in time before a MarketEvent expires changing pricing and available good quantities.
#     """
#     speed: float | None
#     # pirates: bool | None
#     # blockade: bool | None

#     # speed is a % mod ranging from -50% to +50%
#     @classmethod
#     def set_travel_modifiers(cls, obj, travel_modifier):
#         """
#         Sets or appends TravelModifier Objects to Player | City  objects current TravelModifiers as called by get_travel_modifiers(obj)

#         Args:
#             obj (Any): Player | City
#             travel_modifier (TravelModifier): TravelModifier object to append to obj

#         Calls:
#             cls.get_travel_modifiers(obj): Returns list of TravelModifier

#         Returns:
#             None
#         """
#         mod_list = cls.get_travel_modifiers(obj)
#         mod_list.append(travel_modifier)
#         setattr(obj, 'travel_mod_list', mod_list)

#     @classmethod
#     def get_travel_modifiers(cls, obj):
#         """
#         Returns list of TravlelModifier objects for a given object at time of method call

#         Args:
#             obj (Any): Player | City affected by a TravelModifier

#         Returns:
#             list[TravelModifier]: list of all TravelModifier applying to Player | City
#         """
#         return getattr(obj, 'travel_mod_list')
